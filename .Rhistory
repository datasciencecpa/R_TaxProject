library("UsingR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
head(precip)
head(sort(precip, decreasing = TRUE))
current_time <- now()
require(lubridate)
library(UsingR)
require(lubridate)
install.packages("lubridate")
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
current_time <-now()
current_time
?lubridate
month(current_time, label = TRUE)
?ymd
x <- babies$dwt
x
length(x)
x[x==999] <- NA
range(x, na.rm = TRUE)
age <- kid.weights$age
age
ht <- kid.weights$height
ht[age>=48 & age<=60]
ht
gas <- c(65311 65624 659!8 66219 66499 66821 67145 67447)
gas <- c(65311 65624 65908 66219 66499 66821 67145 67447)
gas <- c(65311, 65624, 65908, 66219, 66499, 66821, 67145, 67447)
diff(gas)
mean(gas)
mean (diff(gas))
x <- c(2,5,4,10,8)
x_square = x*x
x_square
?gsub
first_and_last <- function(name) { name <- gsub(" ", "", name) letters <- strsplit(name, split = "")[[1]] c(first = min(letters), last = max(letters)) }
first_and_last("New York")
first_and_last <- function(name) { name <- gsub(" ", "", name) letters <- strsplit(name, split = "")[[1]] c(first = min(letters), last = max(letters)) }
first_and_last <- function(name) {
name <- gsub(" ", "", name)
letters <- strsplit(name, split = "")[[1]]
c(first = min(letters), last = max(letters))
}
first_and_last("New York")
help(gsub)
gsub(" ","", "New York")
a <- gsub(" ","", "New York")
letters <- strsplit(a, split = "")[[1]]
letters
?cat
cat("The average temperature is", mean(x), "\n")
cat("The average temperature is", mean(c(10,5,20,1)), "\n")
?vapply
?vapply(list, function, FUN.VALUE = type, ...)
rep(seq(8, 2, by = -2), times = 2))
rep(seq(8, 2, by = -2), times = 2)
?strptime
install.packages(c("nycflights13", "gapminder", "Lahman"))
install.packages(c("backports", "BH", "class", "codetools", "htmlTable", "pillar", "rlang", "tibble"))
install.packages("rmarkdown")
install.packages("tinytex")
unlink('Desktop/rmarkdown-book/03-documents_cache', recursive = TRUE)
shiny::runApp('Desktop/R_Shiny/Example_01')
if (interactive()) {
ui <- fluidPage(
uiOutput("moreControls")
)
server <- function(input, output) {
output$moreControls <- renderUI({
tagList(
sliderInput("n", "N", 1, 1000, 500),
textInput("label", "Label")
)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
uiOutput("moreControls")
)
server <- function(input, output) {
output$moreControls <- renderUI({
tagList(
sliderInput("n", "N", 1, 1000, 500),
textInput("label", "Label")
)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
uiOutput("moreControls")
)
server <- function(input, output) {
output$moreControls <- renderUI({
tagList(
sliderInput("n", "N", 1, 1000, 500),
textInput("label", "Label")
)
})
}
shinyApp(ui, server)
}
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
if (interactive()) {
ui <- fluidPage(
uiOutput("moreControls")
)
server <- function(input, output) {
output$moreControls <- renderUI({
tagList(
sliderInput("n", "N", 1, 1000, 500),
textInput("label", "Label")
)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
p("The first radio button group controls the second"),
radioButtons("inRadioButtons", "Input radio buttons",
c("Item A", "Item B", "Item C")),
radioButtons("inRadioButtons2", "Input radio buttons 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inRadioButtons
# Can also set the label and select items
updateRadioButtons(session, "inRadioButtons2",
label = paste("radioButtons label", x),
choices = x,
selected = x
)
})
}
shinyApp(ui, server)
}
shiny::runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
k <- c(5,6)
all(k<7)
t <- c("NO", "YES")
all(t == "NO")
t1 <- c("NO", "No")
all (t1 =="NO")
t1 <- c("NO", "NO")
all (t1 =="NO")
fS <- "Single"
FS <- "Single/HOH/FMS"
grepl(fS, FS)
fS = "SINGLE"
grepl(fS, FS)
fS <- "HOH"
grepl(fS, FS)
t <- c("NO", "NO")
any(t =="NO")
which (t=="NO")
t1 <- c("NO", "YES")
which (t1 =="NO")
b <- c(500,600)
b[which(t1=="NO")]
shiny::runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
shiny::runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
MAGI_2017 <- sum(as.numeric(AGIIncome$AGI_2017)) - deduction_2017
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
View(totalDeductionToAGI)
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
hsaTbl <- read.xls(xls="TaxRates.xls", sheet= 10)
runApp('Desktop/R_TaxProject')
library(plyr)
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
shiny::runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
returnDF["Adjusted_Gross_Income", ] <- c(sum(AGIIncome$AGI_2018) -
sum(as.numeric(returnDF[c("Educator_Expense", "HSA_Deduction_Amt","Your_IRA_Deduction",
"Your_Spouse_IRA_Deduction","Student_Loan_Deduction"), "Deduction_2018"])),
sum(AGIIncome$AGI_2017) -
sum(as.numeric(returnDF[c("Educator_Expense", "HSA_Deduction_Amt","Your_IRA_Deduction",
"Your_Spouse_IRA_Deduction","Student_Loan_Deduction"), "Deduction_2017"])))
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
percentage <- ifelse (percentage>=1, 1, percentage)
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
shiny::runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
# Determine if Qualified Dividends and CG Worksheet need to be used
# When there are Qualified Div, or LT CapGain, this worksheet needs to be used
# To figure out amounts that may be eligible for lower rate
taxAmount <- function (taxYear, taxableIncome){
#helper function, use to figure out taxable income
}
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
View(IRADeduction)
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
shiny::runApp('Desktop/R_TaxProject')
shiny::runApp('Desktop/R_TaxProject')
tabPanel("Deductions",
# Inputs for above the line deductions
fluidRow(
column(9, numericInput(ns("educatorExp_2018"), label = "Educator Expense ($250/person, up to $500 for MFJ):", value = 0)),
column(3, tags$strong("Help:"), a(href="https://www.irs.gov/taxtopics/tc458", "Topic #458-Educator Expense Deduction"))
), # End Educator Expense
fluidRow(
column(9, numericInput(ns("HSA_2018"), label = "HSA contributions:", value = 0),
column(8,
numericInput(ns("W2HSA_2018"), label = "Enter your HSA contribution as reported on all of your W-2", value = 0)
),
column(4,
selectInput(ns("HSAPlan_2018"), label = "Select your HSA plan", choices = c("Single", "Family"), selected = "Single"))
),
column(3, tags$strong("Help:"), a(href="https://www.irs.gov/publications/p969", "Pub #969: Health Saving Accounts"))
), # End HSA Contribution
fluidRow(
column(6,numericInput(ns("YourIRA_2018"), label = "Your Deductible IRA Contribution:", value = 0)
),
column(6,numericInput(ns("SpouseIRA_2018"), label = "Spouse Deductible IRA Contribution:", value = 0)),
column(6, radioButtons(ns("YourIRACover_2018"), label = "Were you covered by a retirement plan at work or through self-employment?",
choices = c("YES", "NO"), selected = "NO")),
column(6, radioButtons(ns("SpouseIRACover_2018"), label ="Were you covered by a retirement plan at work or through self-employment?",
choices = c("YES", "NO"), selected = "NO"))
),
fluidRow(
columnumericInput(ns("studentLoan_2018"), label = "Enter your student loan interest(Max $2500):", value = 0)
),
column(6, h4("2017"),
numericInput(ns("educatorExp_2017"), label = "Educator Expense ($250/person, up to $500 for MFJ):", value = 0),
numericInput(ns("HSA_2017"), label = "HSA contributions:", value = 0),
column(8,
numericInput(ns("W2HSA_2017"), label = "Enter your HSA contribution as reported on all of your W-2", value = 0)
),
column(4,selectInput(ns("HSAPlan_2017"), label = "Select your HSA plan", choices = c("Single", "Family"), selected = "Single")),
column(6,numericInput(ns("YourIRA_2017"), label = "Your Deductible IRA Contribution:", value = 0)
),
column(6,numericInput(ns("SpouseIRA_2017"), label = "Spouse Deductible IRA Contribution:", value = 0)),
column(6, radioButtons(ns("YourIRACover_2017"), label = "Were you covered by a retirement plan at work or through self-employment?",
choices = c("YES", "NO"), selected = "NO")),
column(6, radioButtons(ns("SpouseIRACover_2017"), label ="Were you covered by a retirement plan at work or through self-employment?",
choices = c("YES", "NO"), selected = "NO")),
numericInput(ns("studentLoan_2017"), label = "Enter your student loan interest(Max $2500):", value = 0)
)
), hr(), #Input for itemize deductions
fluidRow(
helpText("Enter expenses below if you would like to check itemized deductions. Standard deduction will be claimed if it is higher than your itemized expenses!")
),
fluidRow(
column(6, h4("2018"),
numericInput(ns("medicalExp_2018"), label = "Enter eligible medical expenses:", value = 0),
numericInput(ns("stateTax_2018"), label = "Enter state and local income taxes or general sales tax:", value = 0),
numericInput(ns("realEstateTax_2018"), label = "Enter real estate taxes:", value = 0 ),
numericInput(ns("personalTax_2018"), label = "Enter personal property taxes:", value = 0 ),
numericInput(ns("mortgageInterest_2018"), label = "Enter your eligible mortgage interest:", value = 0 ),
numericInput(ns("PMI_2018"), label = "Enter your premium mortgage insurance:", value = 0 ),
numericInput(ns("charitable_2018"), label = "Enter your charitable deductions:", value = 0 )
),
column(6, h4("2018"),
numericInput(ns("medicalExp_2017"), label = "Enter eligible medical expenses:", value = 0 ),
numericInput(ns("stateTax_2017"), label = "Enter state and local income taxes or general sales tax:", value = 0 ),
numericInput(ns("realEstateTax_2017"), label = "Enter real estate taxes:", value = 0 ),
numericInput(ns("personalTax_2017"), label = "Enter personal property taxes:", value = 0 ),
numericInput(ns("mortgageInterest_2017"), label = "Enter your eligible mortgage interest:", value = 0 ),
numericInput(ns("PMI_2017"), label = "Enter your premium mortgage insurance:", value = 0 ),
numericInput(ns("charitable_2017"), label = "Enter your charitable deductions:", value = 0 )
)
)
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
shiny::runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
shiny::runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
a <- data.frame(c(10,20), c(15,25), row.names = c("AA", "BB"))
a
colnames(a) <- c("T1","T2")
a
colnames(a["T1"]) <- "Amount"
a
a <- colnames(a["T1"]) <- "Amount"
a
a <- data.frame(c(10,20), c(15,25), row.names = c("AA", "BB"))
colnames(a) <- c("T1","T2")
a
colnames(a)[1] <- "Amount"
a
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
setwd("~/Desktop/R_TaxProject")
