a[c(1, 3, 5)]
a[2:6]
a <- c("k", "j", "h", "a", "c", "m")
a[3]
R.version
mean(2.23, 3.45,1.87, 2.11, 7.33, 18.34, 19.23)
mean(2.23, 3.45,1.87, 2.11, 7.33, 18.34, 19.23)
mean (2.23, 3.45, 1.87, 2.11, 7.33, 18.34, 19.23)
mean (2.23, 3.45, 1.87, 2.11, 7.33, 18.34, 19.23, 100)
a <- c(2,23, 3.45, 1.87,, 2.11, 7.33, 18.34, 19.23)
a <- c(2.23, 3.45, 1.87, 2.11, 7.33, 18.34, 19.23)
mean (a)
install.packages("rafalib")
install.packages("downloader")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extd\
ata/femaleMiceWeights.csv"
filename <- "femaleMiceWeights.csv"
download(url, destfile=filename)
install.packages("devtools")
install.packages("swirl")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+ c(0,10,100)
z*2+1000
my_div
getwd()
ls
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- list.files()
old.dir <- ls()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
?seq
seq(0,10,by=0.5)
seq(5,10, len=30)
seq(5,10,length = 30)
my_seq <- seq(5,10, len=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
a <- num_vect?=6
a <- num_vect>=6
num_vect>=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Long Nguyen")
my_name
paste(my_name, collapse = " ")
paste ("Hello", "world!", sep = " ")
paste(1:3, c("X","Y", "Z"), sep = "")
LETTERS
paste(LETTERS, 1:4, sep="-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_data
my_na <- is.na(my_data)
my_na
my_data ==NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)& x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names()
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
my_vector
attributes(my_vector)
class(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix <- matrix(1:20,nrow= 4,ncol = 5)
my_matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
info()
?matrix
nxt()
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
?demo
swirl()
library(swirl)
rm(list = ls())
swirl()
1:20
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data=my_matrix, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina","Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10>=10
10<=10
5!=7
!(5==7)
info()
main()
skip()
skip()
skip()
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
skip()
skip()
skip()
info()
main()
main()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, by=5)
remainder(11, divisor = 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
help.search ("standard deviation")
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
submit()
telegram("Long Nguyen is smart!!")
submit()
mad_libs(c(place= "Shakopee", adjective= "nice", noun= "Me"))
submit()
"I"%p% "love" %p% "R!"
main()
head(flags)
dim(flags)
summary(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
bye()
install.packages(LaTex)
library("tinytex", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("shiny")
install.packages(c("checkmate", "clipr", "colorspace", "data.table", "openssl", "tibble"))
install.packages("shinyjs")
install.packages("DT")
install.packages("DT")
shiny::runApp('Desktop/R_TaxProject')
setwd("~/Desktop/R_TaxProject")
twmp
temp
# This module was used to calculate above the line deductions, and figure out
# amount of standard deduction or itemized deduction, which ever is larger.
# Author: Long Nguyen
# Date Created: 01/28/2019
# HSA Deductions, see form 8889 Instruction
# https://www.irs.gov/pub/irs-pdf/i8889.pdf
library (gdata)
hsaTbl <- read.xls(xls="TaxRates.xls", sheet= 10)
print (hsaTbl)
HSADeduction <- function (ages, contributionAmt, hsaPlan, taxYear) {
# In order to calculate HSA deduction, this function will need the following information.
# * Ages - this will be the ages of individual and/or spouses if both contribute to HSA either as Single or Family.
# * Individual with ages >55 can eligible for HSA catch-up contribution of $1000. Assuming that they are eligible for entire year
# * contributionAmt - This is a vector contains individual contribution to HSA (outsite of employee contribution), and employer contribution
# * hsaPlan - which has either Single/Family value
# * taxYear
maxContribution <- as.numeric(hsaTbl[hsaTbl$YEAR == taxYear & hsaTbl$TYPE == toupper(hsaPlan), "MAX_CONTRIBUTION"])
print (paste ("Max Contribution: ",maxContribution))
catchupContribution <- function (ages){
switch(sum(ages>55),
2 = ifelse (hsaPlan =="Single", 1000, 2000),
1 = 1000,
0 = 0)}
print (paste("catchup contribution:", catchupContribution))
maxContribution <- maxContribution + catchupContribution
print (paste ("Max Contribution: ",maxContribution))
employeeContribution <- contributionAmt[1]
employerContribution <- contributionAmt[2]
eligibleAmount <- maxContribution - employerContribution # this is the maximum amount of additional HSA contribution employee can contribute
print (paste("Eligible amount:", eligibleAmount))
return (ifelse (eligibleAmount>employeeContribution, employeeContribution, eligibleAmount))
}
temp <- HSADeduction(ages = c(55,40), contributionAmt = c(4500,4100), hsaPlan = "Family", 2018)
print (temp)
# This module was used to calculate above the line deductions, and figure out
# amount of standard deduction or itemized deduction, which ever is larger.
# Author: Long Nguyen
# Date Created: 01/28/2019
# HSA Deductions, see form 8889 Instruction
# https://www.irs.gov/pub/irs-pdf/i8889.pdf
library (gdata)
hsaTbl <- read.xls(xls="TaxRates.xls", sheet= 10)
print (hsaTbl)
HSADeduction <- function (ages, contributionAmt, hsaPlan, taxYear) {
# In order to calculate HSA deduction, this function will need the following information.
# * Ages - this will be the ages of individual and/or spouses if both contribute to HSA either as Single or Family.
# * Individual with ages >55 can eligible for HSA catch-up contribution of $1000. Assuming that they are eligible for entire year
# * contributionAmt - This is a vector contains individual contribution to HSA (outsite of employee contribution), and employer contribution
# * hsaPlan - which has either Single/Family value
# * taxYear
maxContribution <- as.numeric(hsaTbl[hsaTbl$YEAR == taxYear & hsaTbl$TYPE == toupper(hsaPlan), "MAX_CONTRIBUTION"])
print (paste ("Max Contribution: ",maxContribution))
catchupContribution <- function (ages){
switch(sum(ages>55),
2 = ifelse (hsaPlan =="Single", 1000, 2000),
1 = 1000,
0 = 0)}
print (paste("catchup contribution:", catchupContribution))
maxContribution <- maxContribution + catchupContribution()
print (paste ("Max Contribution: ",maxContribution))
employeeContribution <- contributionAmt[1]
employerContribution <- contributionAmt[2]
eligibleAmount <- maxContribution - employerContribution # this is the maximum amount of additional HSA contribution employee can contribute
print (paste("Eligible amount:", eligibleAmount))
return (ifelse (eligibleAmount>employeeContribution, employeeContribution, eligibleAmount))
}
temp <- HSADeduction(ages = c(55,40), contributionAmt = c(4500,4100), hsaPlan = "Family", 2018)
print (temp)
# This module was used to calculate above the line deductions, and figure out
# amount of standard deduction or itemized deduction, which ever is larger.
# Author: Long Nguyen
# Date Created: 01/28/2019
# HSA Deductions, see form 8889 Instruction
# https://www.irs.gov/pub/irs-pdf/i8889.pdf
library (gdata)
hsaTbl <- read.xls(xls="TaxRates.xls", sheet= 10)
print (hsaTbl)
HSADeduction <- function (ages, contributionAmt, hsaPlan, taxYear) {
# In order to calculate HSA deduction, this function will need the following information.
# * Ages - this will be the ages of individual and/or spouses if both contribute to HSA either as Single or Family.
# * Individual with ages >55 can eligible for HSA catch-up contribution of $1000. Assuming that they are eligible for entire year
# * contributionAmt - This is a vector contains individual contribution to HSA (outsite of employee contribution), and employer contribution
# * hsaPlan - which has either Single/Family value
# * taxYear
maxContribution <- as.numeric(hsaTbl[hsaTbl$YEAR == taxYear & hsaTbl$TYPE == toupper(hsaPlan), "MAX_CONTRIBUTION"])
print (paste ("Max Contribution: ",maxContribution))
catchupContribution <- function (ages){
switch(sum(ages>55),
2 = ifelse (hsaPlan =="Single", 1000, 2000),
1 = 1000,
0 = 0)}
print (paste("catchup contribution:", catchupContribution))
maxContribution <- maxContribution + catchupContribution()
print (paste ("Max Contribution: ",maxContribution))
employeeContribution <- contributionAmt[1]
employerContribution <- contributionAmt[2]
eligibleAmount <- maxContribution - employerContribution # this is the maximum amount of additional HSA contribution employee can contribute
print (paste("Eligible amount:", eligibleAmount))
return (ifelse (eligibleAmount>employeeContribution, employeeContribution, eligibleAmount))
}
temp <- HSADeduction(ages = c(55,40), contributionAmt = c(4500,4100), hsaPlan = "Family", 2018)
print (temp)
# This module was used to calculate above the line deductions, and figure out
# amount of standard deduction or itemized deduction, which ever is larger.
# Author: Long Nguyen
# Date Created: 01/28/2019
# HSA Deductions, see form 8889 Instruction
# https://www.irs.gov/pub/irs-pdf/i8889.pdf
library (gdata)
hsaTbl <- read.xls(xls="TaxRates.xls", sheet= 10)
print (hsaTbl)
HSADeduction <- function (ages, contributionAmt, hsaPlan, taxYear) {
# In order to calculate HSA deduction, this function will need the following information.
# * Ages - this will be the ages of individual and/or spouses if both contribute to HSA either as Single or Family.
# * Individual with ages >55 can eligible for HSA catch-up contribution of $1000. Assuming that they are eligible for entire year
# * contributionAmt - This is a vector contains individual contribution to HSA (outsite of employee contribution), and employer contribution
# * hsaPlan - which has either Single/Family value
# * taxYear
maxContribution <- as.numeric(hsaTbl[hsaTbl$YEAR == taxYear & hsaTbl$TYPE == toupper(hsaPlan), "MAX_CONTRIBUTION"])
print (paste ("Max Contribution: ",maxContribution))
if (sum(ages>=55) ==2 ) {
if (hsaPlan == "Family") catchupContribution = 2000
else catchupContribution = 1000
} else if (sum(ages>=55) == 1) {
catchupContribution = 1000
} else catchupContribution = 0
print (paste("catchup contribution:", catchupContribution))
maxContribution <- maxContribution + catchupContribution()
print (paste ("Max Contribution: ",maxContribution))
employeeContribution <- contributionAmt[1]
employerContribution <- contributionAmt[2]
eligibleAmount <- maxContribution - employerContribution # this is the maximum amount of additional HSA contribution employee can contribute
print (paste("Eligible amount:", eligibleAmount))
return (ifelse (eligibleAmount>employeeContribution, employeeContribution, eligibleAmount))
}
temp <- HSADeduction(ages = c(55,40), contributionAmt = c(4500,4100), hsaPlan = "Family", 2018)
print (temp)
# This module was used to calculate above the line deductions, and figure out
# amount of standard deduction or itemized deduction, which ever is larger.
# Author: Long Nguyen
# Date Created: 01/28/2019
# HSA Deductions, see form 8889 Instruction
# https://www.irs.gov/pub/irs-pdf/i8889.pdf
library (gdata)
hsaTbl <- read.xls(xls="TaxRates.xls", sheet= 10)
print (hsaTbl)
HSADeduction <- function (ages, contributionAmt, hsaPlan, taxYear) {
# In order to calculate HSA deduction, this function will need the following information.
# * Ages - this will be the ages of individual and/or spouses if both contribute to HSA either as Single or Family.
# * Individual with ages >55 can eligible for HSA catch-up contribution of $1000. Assuming that they are eligible for entire year
# * contributionAmt - This is a vector contains individual contribution to HSA (outsite of employee contribution), and employer contribution
# * hsaPlan - which has either Single/Family value
# * taxYear
maxContribution <- as.numeric(hsaTbl[hsaTbl$YEAR == taxYear & hsaTbl$TYPE == toupper(hsaPlan), "MAX_CONTRIBUTION"])
print (paste ("Max Contribution: ",maxContribution))
if (sum(ages>=55) ==2 ) {
if (hsaPlan == "Family") catchupContribution = 2000
else catchupContribution = 1000
} else if (sum(ages>=55) == 1) {
catchupContribution = 1000
} else catchupContribution = 0
print (paste("catchup contribution:", catchupContribution))
maxContribution <- maxContribution + catchupContribution()
print (paste ("Max Contribution: ",maxContribution))
employeeContribution <- contributionAmt[1]
employerContribution <- contributionAmt[2]
eligibleAmount <- maxContribution - employerContribution # this is the maximum amount of additional HSA contribution employee can contribute
print (paste("Eligible amount:", eligibleAmount))
return (ifelse (eligibleAmount>employeeContribution, employeeContribution, eligibleAmount))
}
temp <- HSADeduction(ages = c(55,40), contributionAmt = c(4500,4100), hsaPlan = "Family", 2018)
# This module was used to calculate above the line deductions, and figure out
# amount of standard deduction or itemized deduction, which ever is larger.
# Author: Long Nguyen
# Date Created: 01/28/2019
# HSA Deductions, see form 8889 Instruction
# https://www.irs.gov/pub/irs-pdf/i8889.pdf
library (gdata)
hsaTbl <- read.xls(xls="TaxRates.xls", sheet= 10)
print (hsaTbl)
HSADeduction <- function (ages, contributionAmt, hsaPlan, taxYear) {
# In order to calculate HSA deduction, this function will need the following information.
# * Ages - this will be the ages of individual and/or spouses if both contribute to HSA either as Single or Family.
# * Individual with ages >55 can eligible for HSA catch-up contribution of $1000. Assuming that they are eligible for entire year
# * contributionAmt - This is a vector contains individual contribution to HSA (outsite of employee contribution), and employer contribution
# * hsaPlan - which has either Single/Family value
# * taxYear
maxContribution <- as.numeric(hsaTbl[hsaTbl$YEAR == taxYear & hsaTbl$TYPE == toupper(hsaPlan), "MAX_CONTRIBUTION"])
print (paste ("Max Contribution: ",maxContribution))
if (sum(ages>=55) ==2 ) {
if (hsaPlan == "Family") catchupContribution = 2000
else catchupContribution = 1000
} else if (sum(ages>=55) == 1) {
catchupContribution = 1000
} else catchupContribution = 0
print (paste("catchup contribution:", catchupContribution))
maxContribution <- maxContribution + catchupContribution
print (paste ("Max Contribution: ",maxContribution))
employeeContribution <- contributionAmt[1]
employerContribution <- contributionAmt[2]
eligibleAmount <- maxContribution - employerContribution # this is the maximum amount of additional HSA contribution employee can contribute
print (paste("Eligible amount:", eligibleAmount))
return (ifelse (eligibleAmount>employeeContribution, employeeContribution, eligibleAmount))
}
temp <- HSADeduction(ages = c(55,40), contributionAmt = c(4500,4100), hsaPlan = "Family", 2018)
HSADeduction(ages = c(56, 60), contributionAmt = c(5000, 2300), hsaPlan = "Single", 2018)
HSADeduction(ages = c(56, 60), contributionAmt = c(5000, 4600), hsaPlan = "Single", 2018)
# This module was used to calculate above the line deductions, and figure out
# amount of standard deduction or itemized deduction, which ever is larger.
# Author: Long Nguyen
# Date Created: 01/28/2019
# HSA Deductions, see form 8889 Instruction
# https://www.irs.gov/pub/irs-pdf/i8889.pdf
library (gdata)
hsaTbl <- read.xls(xls="TaxRates.xls", sheet= 10)
print (hsaTbl)
HSADeduction <- function (ages, contributionAmt, hsaPlan, taxYear) {
# In order to calculate HSA deduction, this function will need the following information.
# * Ages - this will be the ages of individual and/or spouses if both contribute to HSA either as Single or Family.
# * Individual with ages >55 can eligible for HSA catch-up contribution of $1000. Assuming that they are eligible for entire year
# * contributionAmt - This is a vector contains individual contribution to HSA (outsite of employee contribution), and employer contribution
# * hsaPlan - which has either Single/Family value
# * taxYear
maxContribution <- as.numeric(hsaTbl[hsaTbl$YEAR == taxYear & hsaTbl$TYPE == toupper(hsaPlan), "MAX_CONTRIBUTION"])
print (paste ("Max Contribution: ",maxContribution))
if (sum(ages>=55) ==2 ) {
if (hsaPlan == "Family") catchupContribution = 2000
else catchupContribution = 1000
} else if (sum(ages>=55) == 1) {
catchupContribution = 1000
} else catchupContribution = 0
print (paste("catchup contribution:", catchupContribution))
maxContribution <- maxContribution + catchupContribution
print (paste ("Max Contribution: ",maxContribution))
employeeContribution <- contributionAmt[1]
employerContribution <- contributionAmt[2]
eligibleAmount <- maxContribution - employerContribution # this is the maximum amount of additional HSA contribution employee can contribute
print (paste("Eligible amount:", eligibleAmount))
eligibleAmount <- ifelse (eligibleAmount>0, eligibleAmount, 0)
return (ifelse (eligibleAmount>employeeContribution, employeeContribution, eligibleAmount))
}
temp <- HSADeduction(ages = c(55,40), contributionAmt = c(4500,4100), hsaPlan = "Family", 2018)
HSADeduction(ages = c(56, 60), contributionAmt = c(5000, 4600), hsaPlan = "Single", 2018)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
