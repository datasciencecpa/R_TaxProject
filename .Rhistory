library("UsingR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
head(precip)
head(sort(precip, decreasing = TRUE))
current_time <- now()
require(lubridate)
library(UsingR)
require(lubridate)
install.packages("lubridate")
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
current_time <-now()
current_time
?lubridate
month(current_time, label = TRUE)
?ymd
x <- babies$dwt
x
length(x)
x[x==999] <- NA
range(x, na.rm = TRUE)
age <- kid.weights$age
age
ht <- kid.weights$height
ht[age>=48 & age<=60]
ht
gas <- c(65311 65624 659!8 66219 66499 66821 67145 67447)
gas <- c(65311 65624 65908 66219 66499 66821 67145 67447)
gas <- c(65311, 65624, 65908, 66219, 66499, 66821, 67145, 67447)
diff(gas)
mean(gas)
mean (diff(gas))
x <- c(2,5,4,10,8)
x_square = x*x
x_square
?gsub
first_and_last <- function(name) { name <- gsub(" ", "", name) letters <- strsplit(name, split = "")[[1]] c(first = min(letters), last = max(letters)) }
first_and_last("New York")
first_and_last <- function(name) { name <- gsub(" ", "", name) letters <- strsplit(name, split = "")[[1]] c(first = min(letters), last = max(letters)) }
first_and_last <- function(name) {
name <- gsub(" ", "", name)
letters <- strsplit(name, split = "")[[1]]
c(first = min(letters), last = max(letters))
}
first_and_last("New York")
help(gsub)
gsub(" ","", "New York")
a <- gsub(" ","", "New York")
letters <- strsplit(a, split = "")[[1]]
letters
?cat
cat("The average temperature is", mean(x), "\n")
cat("The average temperature is", mean(c(10,5,20,1)), "\n")
?vapply
?vapply(list, function, FUN.VALUE = type, ...)
rep(seq(8, 2, by = -2), times = 2))
rep(seq(8, 2, by = -2), times = 2)
?strptime
install.packages(c("nycflights13", "gapminder", "Lahman"))
install.packages(c("backports", "BH", "class", "codetools", "htmlTable", "pillar", "rlang", "tibble"))
install.packages("rmarkdown")
install.packages("tinytex")
unlink('Desktop/rmarkdown-book/03-documents_cache', recursive = TRUE)
shiny::runApp('Desktop/R_Shiny/Example_01')
setwd("~/Desktop/R_TaxProject")
?source
shiny::runApp()
?numericInput
runApp()
runApp()
runApp()
runApp()
runApp()
?actionButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if (interactive()) {
ui <- fluidPage(
sliderInput("controller", "Controller", 0, 20, 10),
numericInput("inNumber", "Input number", 0),
numericInput("inNumber2", "Input number 2", 0)
)
server <- function(input, output, session) {
observeEvent(input$controller, {
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
updateNumericInput(session, "inNumber", value = x)
updateNumericInput(session, "inNumber2",
label = paste("Number label ", x),
value = x, min = x-10, max = x+10, step = 5)
})
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
# hide additional wages 1 and reset value to zero, and hide the button after it done
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("rsconnect")
install.packages("rsconnect")
observeEvent(input$hideWages1_2018,{
# hide additional wages 1 and reset value to zero, and hide the button after it done
session$sendCustomMessage (type = "testmessage", message = "Testing")
hide (id= "addWages1_2018")
updateNumericInput(session,inputId = input$addWages1_2018, value = 0)
hide (id = "hideWages1_2018")
})
observeEvent(input$hideWages2_2018, {
# hide additional wages 2 and reset value to zero, and hide the button after it done
hide (id= "addWages2_2018")
updateNumericInput(session, inputId = input$addWages2_2018, value = 0)
hide (id = "hideWages2_2018")
})
observeEvent(input$hideWages1_2017,{
# hide additional wages 1 and reset value to zero, and hide the button after it done
hide (id= "addWages1_2017")
updateNumericInput(session, inputId = input$addWages1_2017, value = 0)
hide (id = "hideWages1_2017")
})
observeEvent (input$hideWages2_2017, {
# hide additional wages 2 and reset value to zero, and hide the button after it done
hide (id= "addWages2_2017")
updateNumericInput(session,inputId =  input$addWages2_2017, value = 0)
hide (id = "hideWages2_2017")
})
observeEvent(input$hideWages1_2018,{
# hide additional wages 1 and reset value to zero, and hide the button after it done
session$sendCustomMessage (type = "testmessage", message = "Testing")
hide (id= "addWages1_2018")
updateNumericInput(session,inputId = input$addWages1_2018, value = 0)
hide (id = "hideWages1_2018")
})
observeEvent(input$hideWages2_2018, {
# hide additional wages 2 and reset value to zero, and hide the button after it done
hide (id= "addWages2_2018")
updateNumericInput(session, inputId = input$addWages2_2018, value = 0)
hide (id = "hideWages2_2018")
})
observeEvent(input$hideWages1_2017,{
# hide additional wages 1 and reset value to zero, and hide the button after it done
hide (id= "addWages1_2017")
updateNumericInput(session, inputId = input$addWages1_2017, value = 0)
hide (id = "hideWages1_2017")
})
observeEvent (input$hideWages2_2017, {
# hide additional wages 2 and reset value to zero, and hide the button after it done
hide (id= "addWages2_2017")
updateNumericInput(session,inputId =  input$addWages2_2017, value = 0)
hide (id = "hideWages2_2017")
})
rsconnect::setAccountInfo(name='longnguyen', token='BABB827E29AADCADB81B886270089169', secret='vSZuBu+GzCHcaEb+FWr0LhVpi2Wc4Box6BJnx6HY')
shiny::runApp()
