library("UsingR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
head(precip)
head(sort(precip, decreasing = TRUE))
current_time <- now()
require(lubridate)
library(UsingR)
require(lubridate)
install.packages("lubridate")
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
current_time <-now()
current_time
?lubridate
month(current_time, label = TRUE)
?ymd
x <- babies$dwt
x
length(x)
x[x==999] <- NA
range(x, na.rm = TRUE)
age <- kid.weights$age
age
ht <- kid.weights$height
ht[age>=48 & age<=60]
ht
gas <- c(65311 65624 659!8 66219 66499 66821 67145 67447)
gas <- c(65311 65624 65908 66219 66499 66821 67145 67447)
gas <- c(65311, 65624, 65908, 66219, 66499, 66821, 67145, 67447)
diff(gas)
mean(gas)
mean (diff(gas))
x <- c(2,5,4,10,8)
x_square = x*x
x_square
?gsub
first_and_last <- function(name) { name <- gsub(" ", "", name) letters <- strsplit(name, split = "")[[1]] c(first = min(letters), last = max(letters)) }
first_and_last("New York")
first_and_last <- function(name) { name <- gsub(" ", "", name) letters <- strsplit(name, split = "")[[1]] c(first = min(letters), last = max(letters)) }
first_and_last <- function(name) {
name <- gsub(" ", "", name)
letters <- strsplit(name, split = "")[[1]]
c(first = min(letters), last = max(letters))
}
first_and_last("New York")
help(gsub)
gsub(" ","", "New York")
a <- gsub(" ","", "New York")
letters <- strsplit(a, split = "")[[1]]
letters
?cat
cat("The average temperature is", mean(x), "\n")
cat("The average temperature is", mean(c(10,5,20,1)), "\n")
?vapply
?vapply(list, function, FUN.VALUE = type, ...)
rep(seq(8, 2, by = -2), times = 2))
rep(seq(8, 2, by = -2), times = 2)
?strptime
install.packages(c("nycflights13", "gapminder", "Lahman"))
install.packages(c("backports", "BH", "class", "codetools", "htmlTable", "pillar", "rlang", "tibble"))
install.packages("rmarkdown")
install.packages("tinytex")
unlink('Desktop/rmarkdown-book/03-documents_cache', recursive = TRUE)
setwd("~/Desktop/R_TaxProject")
print (head(tax_rates))
tax_rates <-  read.table("TaxRates.xls", header = TRUE)
tax_rates <-  read.xls("TaxRates.xls", header = TRUE)
tax_rates <- read.csv("TaxRates.csv")
head(tax_rates)
tax_rates <- read.csv("TaxRates.csv")
head(tax_rates)
class (tax_rates)
install.packages("readxl")
library(readxl)
example("readxl-package")
example ("readxl")
example ("readxl_example")
?readxl
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(sidebarLayout(
sidebarPanel(
sliderInput("controller", "Controller", 1, 3, 1)
),
mainPanel(
tabsetPanel(id = "inTabset",
tabPanel(title = "Panel 1", value = "panel1", "Panel 1 content"),
tabPanel(title = "Panel 2", value = "panel2", "Panel 2 content"),
tabPanel(title = "Panel 3", value = "panel3", "Panel 3 content")
)
)
))
server <- function(input, output, session) {
observeEvent(input$controller, {
updateTabsetPanel(session, "inTabset",
selected = paste0("panel", input$controller)
)
})
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(sidebarLayout(
sidebarPanel(
sliderInput("controller", "Controller", 1, 3, 1)
),
mainPanel(
tabsetPanel(id = "inTabset",
tabPanel(title = "Panel 1", value = "panel1", "Panel 1 content"),
tabPanel(title = "Panel 2", value = "panel2", "Panel 2 content"),
tabPanel(title = "Panel 3", value = "panel3", "Panel 3 content")
)
)
))
server <- function(input, output, session) {
observeEvent(input$controller, {
updateTabsetPanel(session, "inTabset",
selected = paste0("panel", input$controller)
)
})
}
shinyApp(ui, server)
}
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(sidebarLayout(
sidebarPanel(
sliderInput("controller", "Controller", 1, 3, 1)
),
mainPanel(
tabsetPanel(id = "inTabset",
tabPanel(title = "Panel 1", value = "panel1", "Panel 1 content"),
tabPanel(title = "Panel 2", value = "panel2", "Panel 2 content"),
tabPanel(title = "Panel 3", value = "panel3", "Panel 3 content")
)
)
))
server <- function(input, output, session) {
observeEvent(input$controller, {
updateTabsetPanel(session, "inTabset",
selected = paste0("panel", input$controller)
)
})
}
shinyApp(ui, server)
}
?navlistPanel
?fluidRow
?column
shinyApp(ui=ui, server=server)
shinyjs::toggleState("text", input$radios == "enabled")
install.packages("shinyjs")
library(shiny)
library(shiny)
ui <- fluidPage(
shinyjs::useShinyjs(),
column(3,
radioButtons("radios", "",
c("Enabled" = "enabled",
"Disabled" = "disabled"),
inline = TRUE)
),
column(4, textInput("text", "", value = "Disable me"))
)
server <- function(input, output, session) {
observe({
shinyjs::toggleState("text", input$radios == "enabled")
})
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
shinyjs::useShinyjs(),
column(3,
radioButtons("radios", "",
c("Enabled" = "enabled",
"Disabled" = "disabled"),
inline = TRUE)
),
column(4, textInput("text", "", value = "Disable me"))
)
server <- function(input, output, session) {
observe({
shinyjs::toggleState("text", input$radios == "enabled")
})
}
shinyApp(ui=ui, server=server)
?shinyjs
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
p("The first radio button group controls the second"),
radioButtons("inRadioButtons", "Input radio buttons",
c("Item A", "Item B", "Item C")),
radioButtons("inRadioButtons2", "Input radio buttons 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inRadioButtons
# Can also set the label and select items
updateRadioButtons(session, "inRadioButtons2",
label = paste("radioButtons label", x),
choices = x,
selected = x
)
})
}
shinyApp(ui, server)
}
?toggleState
getwd()
runApp('test.R')
runApp('test.R')
?shinyjs
library(shinyjs)
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me"),
textInput("text", "Text")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text")
})
}
)
}
library(shinyjs)
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me"),
textInput("text", "Text")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggle("text")
})
}
)
}
help("toggle")
