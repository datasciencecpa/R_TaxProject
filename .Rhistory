library("UsingR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
head(precip)
head(sort(precip, decreasing = TRUE))
current_time <- now()
require(lubridate)
library(UsingR)
require(lubridate)
install.packages("lubridate")
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
current_time <-now()
current_time
?lubridate
month(current_time, label = TRUE)
?ymd
x <- babies$dwt
x
length(x)
x[x==999] <- NA
range(x, na.rm = TRUE)
age <- kid.weights$age
age
ht <- kid.weights$height
ht[age>=48 & age<=60]
ht
gas <- c(65311 65624 659!8 66219 66499 66821 67145 67447)
gas <- c(65311 65624 65908 66219 66499 66821 67145 67447)
gas <- c(65311, 65624, 65908, 66219, 66499, 66821, 67145, 67447)
diff(gas)
mean(gas)
mean (diff(gas))
x <- c(2,5,4,10,8)
x_square = x*x
x_square
?gsub
first_and_last <- function(name) { name <- gsub(" ", "", name) letters <- strsplit(name, split = "")[[1]] c(first = min(letters), last = max(letters)) }
first_and_last("New York")
first_and_last <- function(name) { name <- gsub(" ", "", name) letters <- strsplit(name, split = "")[[1]] c(first = min(letters), last = max(letters)) }
first_and_last <- function(name) {
name <- gsub(" ", "", name)
letters <- strsplit(name, split = "")[[1]]
c(first = min(letters), last = max(letters))
}
first_and_last("New York")
help(gsub)
gsub(" ","", "New York")
a <- gsub(" ","", "New York")
letters <- strsplit(a, split = "")[[1]]
letters
?cat
cat("The average temperature is", mean(x), "\n")
cat("The average temperature is", mean(c(10,5,20,1)), "\n")
?vapply
?vapply(list, function, FUN.VALUE = type, ...)
rep(seq(8, 2, by = -2), times = 2))
rep(seq(8, 2, by = -2), times = 2)
?strptime
install.packages(c("nycflights13", "gapminder", "Lahman"))
install.packages(c("backports", "BH", "class", "codetools", "htmlTable", "pillar", "rlang", "tibble"))
install.packages("rmarkdown")
install.packages("tinytex")
unlink('Desktop/rmarkdown-book/03-documents_cache', recursive = TRUE)
shiny::runApp('Desktop/R_Shiny/Example_01')
if (interactive()) {
ui <- fluidPage(
uiOutput("moreControls")
)
server <- function(input, output) {
output$moreControls <- renderUI({
tagList(
sliderInput("n", "N", 1, 1000, 500),
textInput("label", "Label")
)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
uiOutput("moreControls")
)
server <- function(input, output) {
output$moreControls <- renderUI({
tagList(
sliderInput("n", "N", 1, 1000, 500),
textInput("label", "Label")
)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
uiOutput("moreControls")
)
server <- function(input, output) {
output$moreControls <- renderUI({
tagList(
sliderInput("n", "N", 1, 1000, 500),
textInput("label", "Label")
)
})
}
shinyApp(ui, server)
}
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
if (interactive()) {
ui <- fluidPage(
uiOutput("moreControls")
)
server <- function(input, output) {
output$moreControls <- renderUI({
tagList(
sliderInput("n", "N", 1, 1000, 500),
textInput("label", "Label")
)
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
p("The first radio button group controls the second"),
radioButtons("inRadioButtons", "Input radio buttons",
c("Item A", "Item B", "Item C")),
radioButtons("inRadioButtons2", "Input radio buttons 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inRadioButtons
# Can also set the label and select items
updateRadioButtons(session, "inRadioButtons2",
label = paste("radioButtons label", x),
choices = x,
selected = x
)
})
}
shinyApp(ui, server)
}
shiny::runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
k <- c(5,6)
all(k<7)
t <- c("NO", "YES")
all(t == "NO")
t1 <- c("NO", "No")
all (t1 =="NO")
t1 <- c("NO", "NO")
all (t1 =="NO")
fS <- "Single"
FS <- "Single/HOH/FMS"
grepl(fS, FS)
fS = "SINGLE"
grepl(fS, FS)
fS <- "HOH"
grepl(fS, FS)
t <- c("NO", "NO")
any(t =="NO")
which (t=="NO")
t1 <- c("NO", "YES")
which (t1 =="NO")
b <- c(500,600)
b[which(t1=="NO")]
shiny::runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
shiny::runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
MAGI_2017 <- sum(as.numeric(AGIIncome$AGI_2017)) - deduction_2017
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
View(totalDeductionToAGI)
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
hsaTbl <- read.xls(xls="TaxRates.xls", sheet= 10)
runApp('Desktop/R_TaxProject')
library(plyr)
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
shiny::runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
returnDF["Adjusted_Gross_Income", ] <- c(sum(AGIIncome$AGI_2018) -
sum(as.numeric(returnDF[c("Educator_Expense", "HSA_Deduction_Amt","Your_IRA_Deduction",
"Your_Spouse_IRA_Deduction","Student_Loan_Deduction"), "Deduction_2018"])),
sum(AGIIncome$AGI_2017) -
sum(as.numeric(returnDF[c("Educator_Expense", "HSA_Deduction_Amt","Your_IRA_Deduction",
"Your_Spouse_IRA_Deduction","Student_Loan_Deduction"), "Deduction_2017"])))
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
percentage <- ifelse (percentage>=1, 1, percentage)
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
shiny::runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
ns <- NS(id)
tabPanel("Income",
# Header
fluidRow(
column(6,checkboxInput(ns("same"), label = "Applied everything from 2018 to 2017", value = TRUE )),
column(5, helpText("Check this box if you want to apply the same inputs from 2018 to 2017. Uncheck this box if you would like to make change to 2017"))
), hr(),
# Wages
fluidRow(
column(6, h4("2018"),
fluidRow(
column(6,numericInput(ns("yourWages_2018"), label = "Enter your wages from W-2, box 1:", value = 0)),
column(6,numericInput(ns("yourW2Tax_2018"), label = "Enter your income tax withheld, box 2:", value = 0))
),# Wages row
fluidRow(
column(6,numericInput(ns("yourMedicareW2_2018"), label = "Enter your medicare wages from W-2, box 5:", value = 0)),
column(6,numericInput(ns("yourMedicareTax_2018"), label = "Enter your medicare tax withheld, box 6:", value = 0))
), # Medicare Wage & Tax Row
fluidRow(
column(6,numericInput(ns("spouseWages_2018"), label = "Enter spouse wages from W-2, box 1:", value = 0)),
column(6,numericInput(ns("spouseW2Tax_2018"), label = "Enter spouse income tax withheld, box 2:", value = 0))
), # Spouse Wages
fluidRow(
column(6,numericInput(ns("spouseMedicareW2_2018"), label = "Enter your medicare wages from W-2, box 5:", value = 0)),
column(6,numericInput(ns("spouseMedicareTax_2018"), label = "Enter your medicare tax withheld, box 6:", value = 0))
),# Spouse Medicare
fluidRow(
column(6,numericInput(ns("addWages1_2018"), label = "Enter additional wages from W-2, box 1:", value = 0)),
column(6,numericInput(ns("addW2Tax1_2018"), label = "Enter income tax from W-2, box 2:", value = 0))
), # Additional wages 1
fluidRow(
column(6,numericInput(ns("addMedicare1_2018"), label = "Enter your medicare wages from W-2, box 5:", value = 0)),
column(6,numericInput(ns("addMedicareTax1_2018"), label = "Enter your medicare tax withheld, box 6:", value = 0))
), # Additional medicare wages and taxes
fluidRow(
actionButton(ns("hideWages1_2018"), label = "Delete", class="btn btn-danger btn-responsive")
), # Action Button
fluidRow(
column(6,numericInput(ns("addWages2_2018"), label = "Enter additional wages from W-2, box 1:", value = 0)),
column(6,numericInput(ns("addW2Tax2_2018"), label = "Enter income tax from W-2, box 2:", value = 0))
), # Additional Wages 2
fluidRow(
column(6,numericInput(ns("addMedicare2_2018"), label = "Enter your medicare wages from W-2, box 5:", value = 0)),
column(6,numericInput(ns("addMedicareTax2_2018"), label = "Enter your medicare tax withheld, box 6:", value = 0))
), # Additional Medicare wages and tax 2
fluidRow(
actionButton(ns("hideWages2_2018"), label = "Delete",class="btn btn-danger btn-responsive")
)
),
column(6,h4("2017"),
fluidRow(
column(6,numericInput(ns("yourWages_2017"), label = "Enter your wages from W-2, box 1:", value = 0)),
column(6,numericInput(ns("yourW2Tax_2017"), label = "Enter your income tax withheld, box 2:", value = 0))
), # Your Wages
fluidRow(
column(6,numericInput(ns("yourMedicareW2_2017"), label = "Enter your medicare wages from W-2, box 5:", value = 0)),
column(6,numericInput(ns("yourMedicareTax_2017"), label = "Enter your medicare tax withheld, box 6:", value = 0))
), # Your medicare wages & tax
fluidRow(
column(6,numericInput(ns("spouseWages_2017"), label = "Enter spouse wages from W-2, box 1:", value = 0)),
column(6,numericInput(ns("spouseW2Tax_2017"), label = "Enter spouse income tax withheld, box 2:", value = 0))
), # Spouse Wages
fluidRow(
column(6,numericInput(ns("spouseMedicareW2_2017"), label = "Enter your medicare wages from W-2, box 5:", value = 0)),
column(6,numericInput(ns("spouseMedicareTax_2017"), label = "Enter your medicare tax withheld, box 6:", value = 0))
), # Spouse medicare wages and tax
fluidRow(
column(6,numericInput(ns("addWages1_2017"), label = "Enter additional wages from W-2, box 1:", value = 0)),
column(6,numericInput(ns("addW2Tax1_2017"), label = "Enter income tax from W-2, box 2:", value = 0))
), # Additional wages 1
fluidRow(
column(6,numericInput(ns("addMedicare1_2017"), label = "Enter your medicare wages from W-2, box 5:", value = 0)),
column(6,numericInput(ns("addMedicareTax1_2017"), label = "Enter your medicare tax withheld, box 6:", value = 0))
), # Additional medicare wages and tax
fluidRow(
actionButton(ns("hideWages1_2017"), label = "Delete",class="btn btn-danger btn-responsive")
), # Action button 1
fluidRow(
column(6, numericInput(ns("addWages2_2017"), label = "Enter additional wages from W-2, box 1:", value = 0)),
column(6,numericInput(ns("addW2Tax2_2017"), label = "Enter income tax from W-2, box 2:", value = 0))
), # Additional Wages 2
fluidRow(
column(6,numericInput(ns("addMedicare2_2017"), label = "Enter your medicare wages from W-2, box 5:", value = 0)),
column(6,numericInput(ns("addMedicareTax2_2017"), label = "Enter your medicare tax withheld, box 6:", value = 0))
), # Additional medicare 2 wages and tax
fluidRow(
actionButton(ns("hideWages2_2017"), label = "Delete", class="btn btn-danger btn-responsive")
)
)
),
hr(),
# Interest
fluidRow(
column(6, h4("2018"),
column(6,
numericInput(ns("interest_2018"), label = "Enter your taxable interest income: (Form 1099-Int, Box 1)",
value = 0, min=0)
),
column(6,
numericInput(ns("interestTax_2018"), label = "Income tax withheld from interest income:", value = 0, min=0)
)
),
column(6,h4("2017"),
column(6,
numericInput(ns("interest_2017"), label = "Enter your taxable interest income: (Form 1099-Int, Box 1)",
value = 0, min=0)
),
column(6,
numericInput(ns("interestTax_2017"), label = "Income tax withheld from interest income:", value = 0, min=0)
)
)
),
hr(),
# Ordinary and Qualified Dividends
fluidRow(
column(6, h4("2018"),
numericInput(ns("ordinaryDividends_2018"), label = "Enter your ordinary dividends income: (Form 1099-DIV)",
value = 0, min=0),
numericInput(ns("qualifiedDividends_2018"), label = "Enter your qualified dividends income: (Form 1099-DIV)",
value = 0, min=0),
numericInput(ns("dividendTax_2018"), label = "Enter your dividend income tax withheld: (Form 1099-DIV)",
value = 0, min=0)
),
column(6, h4("2017"),
numericInput(ns("ordinaryDividends_2017"), label = "Enter your ordinary dividends income: (Form 1099-DIV)",
value = 0, min=0),
numericInput(ns("qualifiedDividends_2017"), label = "Enter your qualified dividends income: (Form 1099-DIV)",
value = 0, min=0),
numericInput(ns("dividendTax_2017"), label = "Enter your dividend income tax withheld: (Form 1099-DIV)",
value = 0, min=0)
)
),
hr(), #Taxable Refunds
helpText("Report taxable refunds, credits, or offsets of State and Local Income Taxes only if they are taxable.
If you did not itemize deductions, or elected to deduct state and local general sales taxes instead of state and local income taxes -
your refund is not taxable. Enter zero below if this applied to you."),
fluidRow(
column(6, h4("2018"),
numericInput(ns("taxRefund_2018"), label = "Taxable refunds, credits, or offsets of state and local income taxes", value = 0)),
column(6, h4("2017"),
numericInput(ns("taxRefund_2017"), label = "Taxable refunds, credits, or offsets of state and local income taxes", value = 0))
), hr(), #Alimony received
helpText("Your alimony income may not be taxable in 2018. If this is the case, enter zero for 2018 below. See ",
a(href="https://www.irs.gov/forms-pubs/about-publication-504", "IRS Publication 504"), " for detail."),
fluidRow(
column(6, h4("2018"),
numericInput(ns("alimony_2018"), label = "Alimony received", value = 0)),
column(6, h4("2017"),
numericInput(ns("alimony_2017"), label = "Alimony received", value = 0))
), hr(),
# Capital Gain
helpText("Enter amount of net short-term and/or long-term capital gain/loss as showed on Schedule D to box below.
This app won't calculate special capital gain such as section 1250 gain or collectible gain."),
fluidRow(
column(4, h4("2018"),
numericInput(ns("LTGain_2018"), label = "Enter your long-term capital gains (loss):", value=0 ),
numericInput(ns("STGain_2018"), label = "Enter your short-term capital gains (loss)", value = 0),
numericInput(ns("capitalTax_2018"), label = "Enter your income tax withheld:", value = 0)
),
column(4,h4("2017"),
numericInput(ns("LTGain_2017"), label = "Enter your long-term capital gains (loss):", value=0),
numericInput(ns("STGain_2017"), label = "Enter your short-term capital gains (loss):", value = 0),
numericInput(ns("capitalTax_2017"), label = "Enter your income tax withheld:", value = 0)
),
column(4,tags$strong("Help:"), a(href= "https://www.irs.gov/taxtopics/tc409", "Topic No. 409 - Capital Gains and Losses"))
),
hr(),
# IRA Distributions
fluidRow(
column(4, h4("2018"),
numericInput(ns("IRADist_2018"), label = "Enter your taxable distribution IRA:", value = 0, min= 0),
numericInput(ns("IRATax_2018"), label = "Enter your income tax withheld:", value = 0),
checkboxInput(ns("IRAException_2018"), label = "Check if you meet exception to 10% additional tax", value = FALSE)
),
column(4, h4("2017"),
numericInput(ns("IRADist_2017"), label = "Enter your taxable distribution IRA:", value = 0, min= 0),
numericInput(ns("IRATax_2017"), label = "Enter your income tax withheld:", value = 0),
checkboxInput(ns("IRAException_2017"), label = "Check if you meet exception to 10% additional tax", value = FALSE)
),
column(4, tags$strong("Help:"),
a(href="https://www.irs.gov/retirement-plans/plan-participant-employee/retirement-topics-tax-on-early-distributions",
"Exception to Tax on Early Distributions")
)
), hr(), # Unemployment income
fluidRow(
column(6, h4("2018"),
column(6, numericInput(ns("unemployment_2018"), label= "Unemployment income received", value = 0)),
column(6, numericInput(ns("unemploymentTax_2018"), label= "Unemployment income tax withheld", value = 0))
),
column(6, h4("2017"),
column(6, numericInput(ns("unemployment_2017"), label= "Unemployment income received", value = 0)),
column(6, numericInput(ns("unemploymentTax_2017"), label= "Unemployment income tax withheld", value = 0))
)
)
)
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
runApp('Desktop/R_TaxProject')
x <- c(1,5,8,4,6)
which (x>5 & x<8)
shiny::runApp()
runApp()
runApp()
